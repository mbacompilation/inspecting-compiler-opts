### Create C file for given mba dataset with format number;groundtruth;mba# cmdline inputs:# 1. Input file or folder (if folder, will create )# 2. Output location (filename will formed from input name)import sysfunc_names = []import osdef add_header_to_c_file(out_file):    out_file.write("#include <stdlib.h>")    out_file.write("\n#include <stdio.h>\n\n")    return      def add_mba_function_to_c_file(out_file, func_name, mba):    out_file.write("\nint " + func_name + "(int x, int y, int z, int a, int b, int c, int d, int e, int f) {")    out_file.write("\n")    out_file.write("return " + mba + ";\n}")    func_names.append(func_name)    return            def add_mba_call_to_c_file(out_file, func_name):     out_file.write("\n")     out_file.write(" sum = " + func_name + "(x, y, z, a, b, c, d, e, f);");     out_file.write("\nprintf(\"\\n%s%x\\n\", \"%i\", sum);")     returndef add_main_to_c_file(out_file):    main_text = """ \n\nint main (int argc, char *argv[]) {         char *xc, *yc, *zc;        char *ac, *bc, *cc, *dc, *ec, *fc;          int x = strtol(argv[1], &xc, 16);        int y = strtol(argv[2], &yc, 16);        int z = strtol(argv[3], &zc, 16);        int a = strtol(argv[4], &ac, 16);        int b = strtol(argv[5], &bc, 16);        int c = strtol(argv[6], &cc, 16);        int d = strtol(argv[7], &dc, 16);        int e = strtol(argv[8], &ec, 16);        int f = strtol(argv[9], &fc, 16);        int sum = 0; """        out_file.write(main_text)    for i in func_names:         add_mba_call_to_c_file(out_file, i)    out_file.write("\n\n return 0;")    out_file.write("\n}")    returndef mba_to_c_file(mba_filename, out_foldername):    func_names.clear()            mba_filename_only = (mba_filename.split("/")[-1]).split(".")[0]    #print("filename is: " + mba_filename_only)    out_c_filepath = sys.argv[2] + "/" + mba_filename_only + ".c"            try:        c_file = open(out_c_filepath, 'w')    except Exception:        print("Could not open output file for writing: " + out_c_filepath)        exit(1)            try:        mba_file = open(mba_filename, 'r')        lines = mba_file.readlines()        mba_file.close()    except Exception:        print("Could not open file for reading" + mba_filename)        return                    if lines == []:        print("Error: input file is empty")        exit(1)                    add_header_to_c_file(c_file)            for line in lines:        if "#" in line:             continue                entryno = ""        gt = ""        mba = ""                try:            entryno, gt, mba = line.split(";")        except:            print("Error: invalid entry: " + line + ". Stopping")            break                            #f_name = op + "_" + str(depth_level) + "_" + str(count)        add_mba_function_to_c_file(c_file, "mba_" + entryno, mba.strip("\n"))            add_main_to_c_file(c_file)        c_file.close()    print("\nDone!")        #### mainif len(sys.argv) < 2:    print("usage: <mba filename or folder>, <output location>")    print("given vars: ")    print(sys.argv)    quit()# file infomba_filepath = sys.argv[1]out_c_folderpath = sys.argv[2]lines = []mba_file = ""if os.path.isdir(mba_filepath):    # get all files in this dir and feed them through    filenames = next(os.walk(mba_filepath), (None, None, []))[2] #https://stackoverflow.com/questions/3207219/how-do-i-list-all-files-of-a-directory    for f in filenames:        print("f is: " + f)        mba_to_c_file(mba_filepath + "/" + f, out_c_folderpath)        else:    mba_to_c_file(mba_filepath, out_c_folderpath)    